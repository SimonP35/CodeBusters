security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        # Pour notre class User
        App\Entity\User:
            # On utilise le meilleur algo présent sur la machine
            algorithm: auto
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features
        app_user_provider:
            # Nos users sont de type Entité Doctrine
            entity:
                # Dont la classe est celle-ci
                class: App\Entity\User
                # La propriété "de connexion/d'affichage"
                property: email
        jwt:
            entity:
                class: App\Entity\User
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # Configurations relatives à la sécurité du JWT
        login:
            pattern: ^/api/login
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            provider: jwt
            pattern: ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        back:
            lazy: true
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login          
        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        
    # Liste des access_control pour définir les routes accessibles selon les roles
    access_control:
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/user/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/api/game/score, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/back/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/back/logout, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/back,      roles: ROLE_ADMIN }

    # https://symfony.com/doc/current/security.html#hierarchical-roles
    # Hiérarchie des rôles pour les futures versions (e.g Création de scénario avec un accès partiels au BO pour l'éventuel futur ROLE_MANAGER)
    role_hierarchy:
        # ROLE_ADMIN hérite de ROLE_USER
        ROLE_ADMIN: ROLE_USER

        # Futures versions

        # ROLE_ADMIN: ROLE_MANAGER
        # ROLE_MANAGER: ROLE_USER
        # Si on souhaite que les MANAGER et ADMIN se comportent comme un USER sur le front
        
